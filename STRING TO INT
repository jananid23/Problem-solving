STRSTRING TO INT
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.
The algorithm for myAtoi(string s) is as follows:
Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.
Example 1:
Input: s = "42"
Output: 42
Explanation:
The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
Step 2: "42" (no characters read because there is neither a '-' nor '+')
Step 3: "42" ("42" is read in)
Example 2:
Input: s = " -042"
Output: -42
Explanation:
Step 1: "   -042" (leading whitespace is read and ignored)
Step 2: "   -042" ('-' is read, so the result should be negative)
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result
Example 3:
Input: s = "1337c0d3"
Output: 1337
Example 4:
Input: s = "0-1"
Output: 0
Example 5:
Input: s = "words and 987"
Output: 0

SOLUTION:

IN "C" LANGUAGE USING atoi()

#include <stdio.h>
#include <stdlib.h>

int main() {
    char str1[] = "12345";
    char str2[] = "   -678";
    char str3[] = "42abc";
    char str4[] = "abc42";
    
    int num1 = atoi(str1);
    int num2 = atoi(str2);
    int num3 = atoi(str3);
    int num4 = atoi(str4);
    
    printf("(\"%s\") = %d\n", str1, num1); // Outputs: atoi("12345") = 12345
    printf("(\"%s\") = %d\n", str2, num2); // Outputs: atoi("   -678") = -678
    printf("(\"%s\") = %d\n", str3, num3); // Outputs: atoi("42abc") = 42
    printf("(\"%s\") = %d\n", str4, num4); // Outputs: atoi("abc42") = 0

    return 0;
}

BEHAVIOUR OF atio() in c:

.atoi starts converting characters from the beginning of the string until it encounters a non-numeric character.
.If the string starts with whitespace, atoi will ignore the leading whitespaces.
.If the string starts with a '+' or '-' sign, atoi will interpret the number as positive or negative accordingly.
.The function stops reading the string as soon as it encounters a character that is not part of a valid numbe

SOLUTION IN PYTHON:

l="42" or l=input("enter the string")
l1=int(l)
print("integer of given string",l1)

