You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.
Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:
Input: height = [1,1]
Output: 1

SOLUTION

def max_area(height):
    left = 0
    right = len(height) - 1
    max_water = 0
    
    while left < right:
        # Calculate the width between the two pointers
        width = right - left
        
        # Calculate the current area
        current_area = min(height[left], height[right]) * width
        
        # Update max_water if the current area is larger
        max_water = max(max_water, current_area)
        
        # Move the pointers
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
            
    return max_water

# Example usage
height1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]
height2 = [1, 1]

print(max_area(height1))  # Output: 49
print(max_area(height2))  # Output: 1
